module reconstruction
  use m_common
  use funit

  real*8, parameter         :: TOLERANCE = 1E-10
  real*8, parameter         :: IS_INTERFACE_TOLERANCE = 1E-8
  real*8, parameter         :: RADIUS = 0.25
contains
  @Test
  subroutine test_exact_mof_reconstruction()
    use m_recon_util
    use m_recon

    implicit none

    real*8                :: angle, normal(2), shift, max_shift_plane, dx(2), pi
    real*8                :: refMoments(3), mofMoments(3), recNormal(2)
    integer               :: adx, sdx

    integer, parameter    :: NR_ANGLE = 20, NR_SHIFT = 20

    pi = 4 * datan(1.0D0)

    dx = [0.123D0, pi/10]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE - pi
      normal = [dcos(angle), dsin(angle)]
      
      max_shift_plane = dot_product(abs(normal), dx) / 2
      shift = max_shift_plane * (-1.D0 + 2 * sdx / (NR_SHIFT + 1.D0))

      refMoments = cmpMoments(normal, dx, shift)
      
      recNormal = mofNormal(refMoments, dx, mofMoments)

      @assertEqual(normal, recNormal, TOLERANCE)
      @assertEqual(refMoments, mofMoments, TOLERANCE)
      
      recNormal = pmofNormal(refMoments, 0.0D0, dx, errTol=TOLERANCE, verbose=.false.)

      @assertEqual(normal, recNormal, TOLERANCE)
    enddo
    enddo
  end subroutine

  @Test
  subroutine test_exact_pmof_reconstruction()
    use m_recon_util
    use m_polygon
    use m_recon

    implicit none

    real*8                :: angle, normal(2), shift, kappa0, max_shift_plane, dx(2)
    real*8                :: refMoments(3), recVolume, recNormal(2), pi, recShift
    integer               :: adx, sdx, kdx

    integer, parameter    :: NR_ANGLE = 20, NR_SHIFT = 20, NR_KAPPA = 20

    pi = 4 * datan(1.0D0)

    dx = [0.123D0, 0.3141592D0]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
    do kdx=1,NR_KAPPA
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE - pi
      normal = [dcos(angle), dsin(angle)]

      max_shift_plane = dot_product(abs(normal), dx) / 2
      shift = max_shift_plane * (-1.D0 + 2 * sdx / (NR_SHIFT + 1.D0))

      kappa0 = -1.D0 + 2 * (kdx - 1.D0) / (NR_KAPPA - 1.D0)

      refMoments = cmpMoments(dx, makeParabola(normal, kappa0, shift))
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        recNormal = pmofNormal(refMoments, kappa0, dx, errTol=TOLERANCE, verbose=.false.)
        @assertEqual(normal, recNormal, TOLERANCE)

        recShift = cmpShift(recNormal, dx, refMoments(1), kappa0, volume=recVolume)
        @assertEqual(refMoments(1), recVolume, TOLERANCE * product(dx))
      endif
    enddo
    enddo
    enddo

  end subroutine

  @Test
  subroutine test_exact_lvira_reconstruction()
    use m_recon_util
    use m_recon

    implicit none

    real*8                :: angle, normal(2), shift, max_shift_plane, dxs(-1:1,2)
    real*8                :: refVolumes(-1:1,-1:1), recNormal(2), pi, refMoments(3), recShift
    real*8                :: xc_neighbour(2), dx_neighbour(2)
    integer               :: adx, sdx, kdx, i, j

    integer, parameter    :: NR_ANGLE = 20, NR_SHIFT = 20

    pi = 4 * datan(1.0D0)

    ! dxs(:,1) is dx and dxs(:,2) is dy for the 3x3 rectilinear grid
    dxs(-1:1,1) = [1., 0.9, 0.5]
    dxs(-1:1,2) = [pi/5, pi/4, pi/3]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE - pi
      normal = [dcos(angle), dsin(angle)]

      max_shift_plane = dot_product(abs(normal), dxs(0,:)) / 2
      shift = max_shift_plane * (-1.D0 + 2 * sdx / (NR_SHIFT + 1.D0))


      do j=-1,1
      do i=-1,1
        dx_neighbour(1) = dxs(i, 1)
        dx_neighbour(2) = dxs(j, 2)

        xc_neighbour(1) = i * (dxs(0,1) + dx_neighbour(1))/2
        xc_neighbour(2) = j * (dxs(0,2) + dx_neighbour(2))/2

        ! NOTE: x0 refers to the position relative to which the interface is defined
        refMoments = cmpMoments(normal, dx_neighbour, shift - dot_product(xc_neighbour, normal))
        refVolumes(i,j) = refMoments(1)

      enddo
      enddo
      
      if (refVolumes(0,0) > IS_INTERFACE_TOLERANCE .and. product(dxs(0,:)) - refVolumes(0,0) > IS_INTERFACE_TOLERANCE) then
        recNormal = lviraNormal(refVolumes, dxs, errTol=TOLERANCE, verbose=.false.)

        @assertEqual(normal, recNormal, TOLERANCE)
        
        recShift = cmpShift(recNormal, dxs(0,:), refVolumes(0,0))
        @assertEqual(shift, recShift, TOLERANCE)
      endif
    enddo
    enddo

  end subroutine

  @Test
  subroutine test_exact_plvira_reconstruction()
    use m_recon_util
    use m_polygon
    use m_recon

    implicit none

    real*8                :: angle, normal(2), shift, kappa0, max_shift_plane, dxs(-1:1,2)
    real*8                :: refVolumes(-1:1,-1:1), recNormal(2), pi, recShift
    real*8                :: xc_neighbour(2), dx_neighbour(2)
    integer               :: adx, sdx, kdx, i, j
    type(tPolygon)        :: cell

    integer, parameter    :: NR_ANGLE = 20, NR_SHIFT = 20, NR_KAPPA = 20

    pi = 4 * datan(1.0D0)

    ! dxs(:,1) is dx and dxs(:,2) is dy for the 3x3 rectilinear grid
    dxs(-1:1,1) = [1., 0.9, 0.5]
    dxs(-1:1,2) = [pi/5, pi/4, pi/3]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
    do kdx=1,NR_KAPPA
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE - pi
      normal = [dcos(angle), dsin(angle)]

      max_shift_plane = dot_product(abs(normal), dxs(0,:)) / 2
      shift = max_shift_plane * (-1.D0 + 2 * sdx / (NR_SHIFT + 1.D0))

      kappa0 = -1.D0 + 2 * (kdx - 1.D0) / (NR_KAPPA - 1.D0)

      do j=-1,1
      do i=-1,1
        dx_neighbour(1) = dxs(i, 1)
        dx_neighbour(2) = dxs(j, 2)

        xc_neighbour(1) = i * (dxs(0,1) + dx_neighbour(1))/2
        xc_neighbour(2) = j * (dxs(0,2) + dx_neighbour(2))/2

        call makeBox(cell, xc_neighbour, dx_neighbour)
        call intersect(cell, makeParabola(normal, kappa0,  shift))

        refVolumes(i,j) = cmpVolume(cell)
      enddo
      enddo
      
      if (refVolumes(0,0) > IS_INTERFACE_TOLERANCE .and. product(dxs(0,:)) - refVolumes(0,0) > IS_INTERFACE_TOLERANCE) then
        recNormal = plviraNormal(refVolumes, kappa0, dxs, errTol=TOLERANCE, verbose=.false.)
        @assertEqual(normal, recNormal, TOLERANCE)
        
        recShift = cmpShift(recNormal, dxs(0,:), refVolumes(0,0), kappa0)
        @assertEqual(shift, recShift, TOLERANCE)
      endif
    enddo
    enddo
    enddo

  end subroutine

  @Test
  subroutine test_exact_prost_reconstruction()
    use m_recon_util
    use m_polygon
    use m_recon

    implicit none

    real*8                :: angle, normal(2), shift, kappa0, max_shift_plane, dxs(-1:1,2)
    real*8                :: refVolumes(-1:1,-1:1), recNormal(2), pi, recShift, recKappa0
    real*8                :: xc_neighbour(2), dx_neighbour(2)
    integer               :: adx, sdx, kdx, i, j
    type(tPolygon)        :: cell

    integer, parameter    :: NR_ANGLE = 20, NR_SHIFT = 20, NR_KAPPA = 20

    pi = 4 * datan(1.0D0)

    ! dxs(:,1) is dx and dxs(:,2) is dy for the 3x3 rectilinear grid
    dxs(-1:1,1) = [1., 0.9, 0.5]
    dxs(-1:1,2) = [pi/5, pi/4, pi/3]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
    do kdx=1,NR_KAPPA
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE - pi
      normal = [dcos(angle), dsin(angle)]

      max_shift_plane = dot_product(abs(normal), dxs(0,:)) / 2
      shift = max_shift_plane * (-1.D0 + 2 * sdx / (NR_SHIFT + 1.D0))

      kappa0 = -1.D0 + 2 * (kdx - 1.D0) / (NR_KAPPA - 1.D0)

      do j=-1,1
      do i=-1,1
        dx_neighbour(1) = dxs(i, 1)
        dx_neighbour(2) = dxs(j, 2)

        xc_neighbour(1) = i * (dxs(0,1) + dx_neighbour(1))/2
        xc_neighbour(2) = j * (dxs(0,2) + dx_neighbour(2))/2

        call makeBox(cell, xc_neighbour, dx_neighbour)
        call intersect(cell, makeParabola(normal, kappa0,  shift))

        refVolumes(i,j) = cmpVolume(cell)
      enddo
      enddo
      
      if (refVolumes(0,0) > IS_INTERFACE_TOLERANCE .and. product(dxs(0,:)) - refVolumes(0,0) > IS_INTERFACE_TOLERANCE) then
        ! Make sure the initial guess is bad (but the sign is correct!)
        recKappa0 = kappa0 * 1.5
        recNormal = prostNormal(refVolumes, recKappa0, dxs, errTol=TOLERANCE/10, verbose=.false.)

        @assertEqual(normal, recNormal, TOLERANCE)
        @assertEqual(kappa0, recKappa0, TOLERANCE)
        
        recShift = cmpShift(recNormal, dxs(0,:), refVolumes(0,0), kappa0)
        @assertEqual(shift, recShift, TOLERANCE)

      endif
    enddo
    enddo
    enddo

  end subroutine

  @Test
  subroutine test_shift_volume_consistency()
    use m_recon_util
    use m_polygon

    implicit none
    
    real*8                :: angle, normal(2), kappa0, shift, shift_recomputed, dx(2)
    real*8                :: volume, volume_recomputed, pi, max_shift_plane
    integer               :: adx, kdx, sdx

    integer, parameter    :: NR_ANGLE = 20, NR_KAPPA = 20, NR_SHIFT = 20

    pi = 4 * datan(1.0D0)

    dx = [0.123D0, 0.3141592D0]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE
      normal = [dcos(angle), dsin(angle)]
      
      max_shift_plane = dot_product(abs(normal), dx) / 2
      shift = max_shift_plane * (-1.D0 + 2 * (sdx - 1.D0) / (NR_SHIFT - 1.D0))

      volume = cmpVolume(normal, dx, shift)
      shift_recomputed = cmpShift(normal, dx, volume)

      if (shift <= -max_shift_plane) then
        @assertLessThanOrEqual(shift_recomputed, -max_shift_plane)
        @assertEqual(0.D0, volume, TOLERANCE)
      elseif (shift >= max_shift_plane) then
        @assertGreaterThanOrEqual(shift_recomputed, max_shift_plane)
        @assertEqual(product(dx), volume, TOLERANCE)
      else
        @assertEqual(shift, shift_recomputed, TOLERANCE)
      endif

      volume_recomputed = cmpVolume(normal, dx, shift_recomputed)
      @assertEqual(volume, volume_recomputed, TOLERANCE)
      
      do kdx=1,NR_KAPPA
        kappa0 = -1.D0 + 2 * (kdx - 1.D0) / (NR_KAPPA - 1.D0)

        volume = cmpVolume(dx, makeParabola(normal, kappa0, shift))
        shift_recomputed = cmpShift(normal, dx, volume, kappa0, volume=volume_recomputed)
        @assertEqual(volume, volume_recomputed, TOLERANCE)

        if (volume < TOLERANCE) then
          
        elseif (product(dx) - volume < TOLERANCE) then
          
        else
          @assertEqual(shift, shift_recomputed, TOLERANCE)
        endif
        
        volume_recomputed = cmpVolume(dx, makeParabola(normal, kappa0, shift_recomputed))
        @assertEqual(volume, volume_recomputed, TOLERANCE)
      enddo
    enddo
    enddo

  end subroutine

  @Test
  subroutine test_shift_volume_consistency_nonrect()
    use m_recon_util
    use m_polygon

    implicit none
    
    type(tPolygon)        :: cell, cell_copy
    real*8                :: angle, normal(2), kappa0, shift, shift_recomputed
    real*8                :: x(2), pos(2, 7), radius, cellVolume
    real*8                :: volume, volume_recomputed, pi
    integer               :: adx, kdx, sdx

    integer, parameter    :: NR_ANGLE = 20, NR_KAPPA = 20, NR_SHIFT = 20

    pi = 4 * datan(1.0D0)

    radius = 1.0D0
    x = [0.05D0, 0.03D0]

    ! Reconstruct in a polygonal approximation of a circle
    do adx=1,size(pos,2)
      angle = 2 * pi * (adx - 1.D0) / size(pos,2)
      pos(1,adx) = x(1) + radius * dcos(angle)
      pos(2,adx) = x(2) + radius * dsin(angle)
    enddo
    call init(cell, pos)

    cellVolume = cmpVolume(cell)

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
    do kdx=1,NR_KAPPA
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE
      normal = [dcos(angle), dsin(angle)]
      
      shift = (radius/2) * (-1.D0 + 2 * (sdx - 1.D0) / (NR_SHIFT - 1.D0))
      
      kappa0 = -1.D0 + 2 * (kdx - 1.D0) / (NR_KAPPA - 1.D0)

      call copy(out=cell_copy, in=cell)
      call intersect(cell_copy, makeParabola(normal, kappa0, shift))
      volume = cmpVolume(cell_copy)

      shift_recomputed = cmpShift(normal, cell, volume, kappa0, volume=volume_recomputed)
      @assertEqual(volume, volume_recomputed, TOLERANCE)

      if (volume < TOLERANCE) then
        
      elseif (cellVolume - volume < TOLERANCE) then
        
      else
        @assertEqual(shift, shift_recomputed, TOLERANCE)
      endif

      call copy(out=cell_copy, in=cell)
      call intersect(cell_copy, makeParabola(normal, kappa0, shift_recomputed))
      volume_recomputed = cmpVolume(cell_copy)
      @assertEqual(volume, volume_recomputed, TOLERANCE)
    enddo
    enddo
    enddo

  end subroutine


  @Test
  subroutine test_approx_reconstruction()
    use m_recon_util
    use m_r2d_parabolic
    use m_recon

    implicit none

    integer, parameter    :: NR_METHODS = 5, NR_GRIDS = 3, LEVEL0 = 5
    integer, parameter    :: LVIRA_IDX = 1, PLVIRA_IDX = 2, PROST_IDX = 3, MOF_IDX = 4, PMOF_IDX = 5
    logical, parameter    :: IS_PARABOLIC(NR_METHODS) = [.false., .true., .true., .false., .true.]
    integer, parameter    :: symmDiff_expectedOrder(NR_METHODS) = [2, 3, 3, 2, 3]
    integer, parameter    :: firstMoment_expectedOrder(NR_METHODS) = 3+[1, 2, 2, 2, 4]

    real*8                :: pi, Lx, Ly, xc(2), dx(2), dxs(-1:1,2)
    real*8                :: refMoments(3), normals(2, NR_METHODS), shift, kappa0(NR_METHODS), kappa0_exact
    real*8                :: refVolumes(-1:1,-1:1), reconMoments(3), errTol
    real*8, allocatable   :: volume_grid(:,:), momx_grid(:,:), momy_grid(:,:)
    real*8                :: symmDiff_vol(NR_GRIDS, NR_METHODS), firstMoment_lInf(NR_GRIDS, NR_METHODS)
    real*8                :: symmDiff_order, firstMoment_order
    integer               :: i, j, N, rdx, mdx
    type(r2d_parabola_f)  :: parabola

    pi = 4 * datan(1.0D0)
    
    Lx = 1.333333
    Ly = 0.966666

    symmDiff_vol = 0
    firstMoment_lInf = 0

    do rdx=1,NR_GRIDS
      N = 2**(rdx + LEVEL0 - 1)
      dx = [Lx, Ly] / N
      dxs(:,1) = dx(1)
      dxs(:,2) = dx(2)

      ! Compute reference moments
      allocate(volume_grid(1:N,1:N))
      allocate(momx_grid(1:N,1:N))
      allocate(momy_grid(1:N,1:N))

      do j=1,N
      do i=1,N
        xc(1) = (i-0.5) * dx(1)
        xc(2) = (j-0.5) * dx(2)
        refMoments = cmpMoments(xc, dx, levelSet, verts_per_segment=N)
        volume_grid(i,j) = refMoments(1)
        momx_grid(i,j) = refMoments(2) - refMoments(1) * xc(1)
        momy_grid(i,j) = refMoments(3) - refMoments(1) * xc(2)
      enddo
      enddo

      errTol = min(1D-2, (minval(dx) / max(Lx, Ly))**2)

      ! Reconstruct
      do j=2,N-1
      do i=2,N-1
        
        refMoments(1) = volume_grid(i,j)
        
        if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
          xc(1) = (i-0.5) * dx(1)
          xc(2) = (j-0.5) * dx(2)

          refVolumes = volume_grid(i-1:i+1,j-1:j+1)
          refMoments(2) = momx_grid(i,j)
          refMoments(3) = momy_grid(i,j)

          ! Approximate, but accurate
          kappa0_exact = levelSet_curvature(xc, minval(dx) / 5)
          kappa0 = 0.0D0
          where (IS_PARABOLIC) kappa0 = kappa0_exact

          normals(:,LVIRA_IDX) = lviraNormal(refVolumes, dxs, errTol=errTol)
          normals(:,PLVIRA_IDX) = plviraNormal(refVolumes, kappa0(PLVIRA_IDX), dxs, errTol=errTol)
          normals(:,PROST_IDX) = prostNormal(refVolumes, kappa0(PROST_IDX), dxs, errTol=errTol)
          normals(:,MOF_IDX) = mofNormal(refMoments, dx)
          normals(:,PMOF_IDX) = pmofNormal(refMoments, kappa0(PMOF_IDX), dx, errTol=errTol)

          do mdx=1,NR_METHODS
            parabola = makeParabola(normals(:,mdx), kappa0(mdx), dx, refVolumes(0,0))
            reconMoments = cmpMoments(dx, parabola)
            firstMoment_lInf(rdx,mdx) = max(firstMoment_lInf(rdx,mdx), norm2(reconMoments(2:3) - refMoments(2:3)))
            symmDiff_vol(rdx,mdx) = symmDiff_vol(rdx,mdx) + cmpSymmDiff(xc, dx, parabola, levelset)
          enddo

        endif   
      enddo
      enddo

      print*, 'm1 err = ', firstMoment_lInf(rdx,:)
      if (rdx > 1) then
        print*, 'm1 order = ', -log(firstMoment_lInf(rdx,:) / firstMoment_lInf(rdx-1,:)) / (log(2.0D0))
        do mdx=1,NR_METHODS
          symmDiff_order = -log(symmDiff_vol(rdx,mdx) / symmDiff_vol(rdx-1,mdx)) / log(2.0D0)
          @assertGreaterThanOrEqual(symmDiff_order, symmDiff_expectedOrder(mdx) - 1D-1)

          firstMoment_order = -log(firstMoment_lInf(rdx,mdx) / firstMoment_lInf(rdx-1,mdx)) / (log(2.0D0))
          @assertGreaterThanOrEqual(firstMoment_order, firstMoment_expectedOrder(mdx) - 5D-1)
        enddo
      endif

      deallocate(volume_grid)
      deallocate(momx_grid)
      deallocate(momy_grid)
    enddo

  end subroutine

  @Test
  subroutine test_reconstruction_time()
    use m_recon_util
    use m_polygon
    use m_recon

    implicit none

    integer, parameter    :: NR_METHODS = 7, N = 2**7
    integer, parameter    :: LVIRA_IDX = 1, LVIRAP_IDX = 2, PLVIRA_IDX = 3, PROST_IDX = 4, MOF_IDX = 5, PMOF_IDX = 6, PMOFP_IDX = 7
    character*6, parameter :: METHODS(NR_METHODS) = ["LVIRA ", "LVIRAP", "PLVIRA", "PROST ", "MOF   ", "PMOF  ", "PMOFP "]
    ! LVIRAP refers to LVIRA using the PLVIRA implementation

    real*8                :: pi, Lx, Ly, xc(2), dx(2), dxs(-1:1,2)
    real*8                :: refMoments(3), normal(2), tmp, reconstruction_time(NR_METHODS)
    real*8                :: refVolumes(-1:1,-1:1), reconMoments(3), errTol, kappa0
    real*8                :: volume_grid(N,N), momx_grid(N,N), momy_grid(N,N), kappa0_exact(N,N)
    integer               :: i, j, mdx
    type(tParabola)       :: parabola
    type(tPolygon)        :: cell

    pi = 4 * datan(1.0D0)
    
    Lx = 1.333333
    Ly = 0.966666

    dx = [Lx, Ly] / N
    dxs(:,1) = dx(1)
    dxs(:,2) = dx(2)

    ! Precompute reference moments
    do j=1,N
    do i=1,N
      xc(1) = (i-0.5) * dx(1)
      xc(2) = (j-0.5) * dx(2)

      call polyApprox(cell, xc, dx, levelSet)
      refMoments = cmpMoments(cell)
      volume_grid(i,j) = refMoments(1)
      momx_grid(i,j) = refMoments(2) - refMoments(1) * xc(1)
      momy_grid(i,j) = refMoments(3) - refMoments(1) * xc(2)

      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        kappa0_exact(i,j) = levelSet_curvature(xc, minval(dx) / 5)
      endif
    enddo
    enddo

    errTol = min(1D-2, (minval(dx) / max(Lx, Ly))**2)

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refVolumes = volume_grid(i-1:i+1,j-1:j+1)

        normal = lviraNormal(refVolumes, dxs, errTol=errTol)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(LVIRA_IDX))
    reconstruction_time(LVIRA_IDX) = reconstruction_time(LVIRA_IDX) - tmp

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refVolumes = volume_grid(i-1:i+1,j-1:j+1)
        kappa0 = 0
        normal = plviraNormal(refVolumes, kappa0, dxs, errTol=errTol)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(LVIRAP_IDX))
    reconstruction_time(LVIRAP_IDX) = reconstruction_time(LVIRAP_IDX) - tmp

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refVolumes = volume_grid(i-1:i+1,j-1:j+1)
        kappa0 = kappa0_exact(i,j)

        normal = plviraNormal(refVolumes, kappa0, dxs, errTol=errTol)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(PLVIRA_IDX))
    reconstruction_time(PLVIRA_IDX) = reconstruction_time(PLVIRA_IDX) - tmp

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refVolumes = volume_grid(i-1:i+1,j-1:j+1)
        kappa0 = kappa0_exact(i,j)

        normal = prostNormal(refVolumes, kappa0, dxs, errTol=errTol)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(PROST_IDX))
    reconstruction_time(PROST_IDX) = reconstruction_time(PROST_IDX) - tmp

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refMoments(2) = momx_grid(i,j)
        refMoments(3) = momy_grid(i,j)

        normal = mofNormal(refMoments, dx)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(MOF_IDX))
    reconstruction_time(MOF_IDX) = reconstruction_time(MOF_IDX) - tmp

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refMoments(2) = momx_grid(i,j)
        refMoments(3) = momy_grid(i,j)
        kappa0 = kappa0_exact(i,j)

        normal = pmofNormal(refMoments, kappa0, dx, errTol=errTol)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(PMOF_IDX))
    reconstruction_time(PMOF_IDX) = reconstruction_time(PMOF_IDX) - tmp

    call cpu_time(tmp)
    do j=2,N-1
    do i=2,N-1
      refMoments(1) = volume_grid(i,j)
      
      if (refMoments(1) > IS_INTERFACE_TOLERANCE .and. product(dx) - refMoments(1) > IS_INTERFACE_TOLERANCE) then
        refMoments(2) = momx_grid(i,j)
        refMoments(3) = momy_grid(i,j)
        kappa0 = kappa0_exact(i,j)

        call makeBox(cell, dx)
        normal = pmofNormal(refMoments, kappa0, cell, errTol=errTol)
      endif   
    enddo
    enddo
    call cpu_time(reconstruction_time(PMOFP_IDX))
    reconstruction_time(PMOFP_IDX) = reconstruction_time(PMOFP_IDX) - tmp

    print*, 'RECONSTRUCTION TIMING:'
    do mdx=1,NR_METHODS
      print*, '... ', METHODS(mdx), ' = ', reconstruction_time(mdx)
    enddo
  end subroutine

  real*8 function levelSet(x) result(ans)
  
    implicit none
    
    real*8, intent(in)  :: x(2)
    
    ! Local variables
    real*8, parameter   :: PERT_REL_AMP = 0.1, PERT_FREQ = 5., X0(2) = [0.5, 0.5], PERT_SHIFT = 0.1
    real*8              :: angle

    angle = datan2(x(2) - X0(2), x(1) - X0(1))
    ans = norm2(x - X0) - RADIUS * (1 + PERT_REL_AMP * dcos(PERT_SHIFT + angle * PERT_FREQ))

  end function

  real*8 function levelSet_curvature(x, h) result(kappa)
    use m_optimization

    implicit none

    real*8, intent(in)  :: x(2), h

    ! Local variables
    real*8, parameter   :: DSTEP = 1D-6
    real                :: lsNormal(2), lsTangent(2), lhfVals(-1:1)
    integer             :: ldx

    lsNormal = [levelSet(x + [1D-6,.0D0]) - levelSet(x - [1D-6,.0D0]), &
                levelSet(x + [.0D0,1D-6]) - levelSet(x - [.0D0,1D-6])]
    lsNormal = lsNormal / norm2(lsNormal)
    lsTangent = [-lsNormal(2), lsNormal(1)]

    ! Construct LHF in lsNormal direction
    do ldx=-1,1
      lhfVals(ldx) = brent(rootfun, -RADIUS/5, RADIUS/5, 1D-12, 50)
    enddo

    kappa = -((lhfVals(1) - 2 * lhfVals(0) + lhfVals(-1)) / h**2) / (sqrt(1 + ((lhfVals(1) - lhfVals(-1))/(2*h))**2)**3)
    
  contains
    real*8 function rootfun(s) result(err)
      implicit none
      
      real*8, intent(in)  :: s

      err = levelSet(x + lsNormal * s + lsTangent * ldx * h)
    end function
  end function
end module