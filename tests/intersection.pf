module intersection
  use m_common
  use funit
  
  real*8, parameter       :: TOLERANCE = 1D-14
contains
  
  @Test
  subroutine test_moments2d()
    use m_reconstruction_util
    use m_r2d

    implicit none

    ! Local variables
    integer, parameter     :: nrBoxes = 8, nrPlics = 100

    type(r2d_poly_f)       :: poly, cutPoly
    real*8                 :: dx(2), x(2), mom_util(3), mom_r2d(3), normal(2), pc, shift
    integer                :: bdx, pdx, SEED(33)

    SEED = 1
    call random_seed(put=SEED)

    x = 0.0D0
    dx = 1.0D0
    call makeBox_bounds(cutPoly, [x - dx/2, x + dx/2])
    shift = 0.0D0
    normal = [0.0D0, 1.0D0]

    call intersect(cutPoly, makePlane(normal, shift + dot_product(normal, x)))
    mom_r2d = cmpMoments(cutPoly)

    mom_util = cmpMoments(normal, dx, shift)

    @assertEqual(mom_r2d, mom_util, TOLERANCE * product(dx))

    do bdx=1,nrBoxes
      call random_number(dx)

      ! Consider boxes of any size
      dx = dx * (10.0D0**(3-bdx))

      call makeBox_bounds(poly, [x - dx/2, x + dx/2])
      do pdx=1,nrPlics
        call copy(to=cutPoly, from=poly)

        call random_number(normal)
        normal = normal - 0.5
        normal = normal / norm2(normal)

        call random_number(pc)
        pc = pc * dot_product(abs(normal), dx)
        shift = pc - dot_product(abs(normal), dx) / 2.0

        call intersect(cutPoly, makePlane(normal, shift + dot_product(normal, x)))
        mom_r2d = cmpMoments(cutPoly)

        mom_util = cmpMoments(normal, dx, shift)

        @assertEqual(mom_r2d, mom_util, TOLERANCE * product(dx))
      enddo
    enddo
  endsubroutine test_moments2d

  ! Verify that the zeroth and first moment resulting from a parabolic cut equals that
  ! of a planar cut if kappa0 = 0
  @Test
  subroutine test_moments2d_planeLimit()
    use m_polygon
    use m_reconstruction_util

    implicit none

    integer, parameter      :: NR_ANGLE = 50, NR_SHIFT = 50
    real*8                  :: dx(2), normal(2), moments_plane(3), moments_parabola(3), moments_plane_poly(3)
    real*8                  :: angle, shift, lengthScale, pi, cellVol
    integer                 :: adx, sdx
    type(tPolygon)          :: poly

    pi = 4 * datan(1.0d0)
    dx = [0.1D0, 0.15D0]
    cellVol = product(dx)

    do adx = 1, NR_ANGLE
    do sdx = 1, NR_SHIFT
      angle = 2 * pi * (adx - 1.D0) / (NR_ANGLE - 1.D0)
      normal = [dcos(angle), dsin(angle)]
      lengthScale = dot_product(dx, abs(normal))

      shift = lengthScale * (sdx - 1.D0) / (NR_SHIFT - 1.D0) - lengthScale/2

      call makeBox(poly, dx)
      call intersect(poly, makePlane(normal, shift))
      moments_plane_poly = cmpMoments(poly)
      
      call makeBox(poly, dx)
      call intersect(poly, makeParabola(normal, 1D-16, shift))
      moments_parabola = cmpMoments(poly)
      
      moments_plane = cmpMoments(normal, dx, shift)

      @assertEqual(moments_plane, moments_parabola, TOLERANCE * cellVol)
      @assertEqual(moments_plane_poly, moments_parabola, TOLERANCE * cellVol)
    enddo
    enddo

  end subroutine test_moments2d_planeLimit

  ! Validate exact parabola intersection
  @Test
  subroutine test_moments2d_analytical
    use m_poly_roots
    use m_polygon
    use m_reconstruction_util

    implicit none

    integer, parameter      :: NR_KAPPA = 100, NR_SHIFT = 100
    real*8                  :: normal(2), dx(2), shift, pc, kappa0, pos(2,4), angle, lengthScale, volumes(8), pos5(2, 5), x0(2)
    real*8                  :: moments01_plane(3), moments01_para(3), moments01_exact(3), tmp(3), moments01_parts(3)
    real*8                  :: A, B, C, xStar, roots(2), root_imag
    type(tPolygon)          :: poly, polys1(1), polys2(2), polys4(4), polys8(8)
    integer                 :: kdx, adx, sdx, ii

    dx = 1.0D0

    ! Verify exactness for simple examples (which contain some interesting edge cases)
    angle = 2 * datan(1.0D0)
    normal = [dcos(angle), dsin(angle)]
    
    do sdx=1,NR_SHIFT
    do kdx=1,NR_KAPPA
      lengthScale = dot_product(dx, abs(normal))
      pc = lengthScale * (sdx - 1.D0) / (NR_SHIFT - 1.D0)
      shift = pc - dot_product(abs(normal), dx)/2

      ! Ensure that |s - Îº/8| < 1/2
      kappa0 = -4.0D0 + 8 * (shift + (kdx - 1.D0) / (NR_KAPPA - 1.D0))
      moments01_para = cmpMoments(dx, makeParabola(normal, kappa0, shift))

      moments01_exact(1) = 0.5D0 + shift - kappa0 / 24
      moments01_exact(2) = 0.0D0
      moments01_exact(3) = ((kappa0**2/720) + moments01_exact(1) * (moments01_exact(1) - 1.0D0))/2


      @assertEqual(moments01_exact, moments01_para, TOLERANCE)
    enddo
    enddo

    ! Verify exactness for some complex cases
    ! #1
    shift = 0.75D0
    kappa0 = 40.0D0
    moments01_para = cmpMoments(dx, makeParabola(normal, kappa0, shift))

    xStar = dsqrt(2 * (shift + dx(2)/2)/kappa0)
    moments01_exact(1) = 2 * ((dx(2)/2 + shift) * xStar - (kappa0/6) * xStar**3)
    xStar = dsqrt(2 * (shift - dx(2)/2)/kappa0)
    moments01_exact(1) = moments01_exact(1) - 2 * ((-dx(2)/2 + shift) * xStar - (kappa0/6) * xStar**3)
    moments01_exact(2) = 0.D0
    @assertEqual(moments01_exact(1), moments01_para(1), TOLERANCE)
    @assertEqual(moments01_exact(2), moments01_para(2), TOLERANCE)

    ! And the complement... (this splits the polygon into three piececs, two of which contribute to the volume)
    normal = -normal
    shift = -shift
    kappa0 = -kappa0
    moments01_para = cmpMoments(dx, makeParabola(normal, kappa0, shift))

    moments01_exact(1) = 1.0D0 - moments01_exact(1)
    @assertEqual(moments01_exact(1), moments01_para(1), TOLERANCE)

    ! #2
    shift = 0.0D0
    angle = datan(1.0D0)
    normal = [dcos(angle), dsin(angle)]
    kappa0 = 4.D0 / dsqrt(2.0D0)

    call makeBox(poly, dx)
    call intersect(poly, makeParabola(normal, kappa0, shift))
    moments01_para = cmpMoments(poly)

    A = 1.D0
    B = dsqrt(8.0D0) / kappa0 + dx(1)
    C = dx(1) * (dx(1) / 4 - dsqrt(2.0D0) / kappa0)
    call polynomial_roots_deg2([A, B, C], roots, root_imag)

    xStar = norm2([roots(2), -dx(2)/2] - [-dx(1)/2, roots(2)]) / 2
    moments01_exact(1) = ((roots(2) + dx(1)/2)**2)/2 + 2 * xStar * (kappa0/2 * xStar**2) - (kappa0 * xStar**3) / 3

    @assertEqual(moments01_exact(1), moments01_para(1), TOLERANCE)

    ! And the complement...
    normal = -normal
    shift = -shift
    kappa0 = -kappa0

    moments01_para = cmpMoments(dx, makeParabola(normal, kappa0, shift))

    moments01_exact(1) = 1.0 - moments01_exact(1)
    @assertEqual(moments01_exact(1), moments01_para(1), TOLERANCE)

    ! Split the box and intersect its parts
    pos(1,1:4) = [0.0D0, dx(1), dx(1), 0.0D0] - dx(1)/2
    pos(2,1:4) = [0.0D0, 0.0D0, dx(2), dx(2)] - dx(2)/2
    call init(polys1(1), pos)
    call split(polys1, makePlane([2.0D0, 1.0D0] / dsqrt(5.D0), 0.1D0), polys2(1:1), polys2(2:2))
    call split(polys2, makePlane([-1.0D0, 3.0D0] / dsqrt(10.D0), -0.1D0), polys4(1:2), polys4(3:4))
    call split(polys4, makePlane([-1.0D0, -1.0D0] / dsqrt(2.D0), 0.3D0), polys8(1:4), polys8(5:8))

    moments01_parts = 0.0
    do ii=1,2
      call intersect(polys2(ii), makeParabola(normal, kappa0, shift))
      tmp = cmpMoments(polys2(ii))
      moments01_parts = moments01_parts + tmp
    enddo
    @assertEqual(moments01_para, moments01_parts, TOLERANCE)

    moments01_parts = 0.0
    do ii=1,4
      call intersect(polys4(ii), makeParabola(normal, kappa0, shift))
      tmp = cmpMoments(polys4(ii))
      moments01_parts = moments01_parts + tmp
    enddo
    @assertEqual(moments01_para, moments01_parts, TOLERANCE)

    moments01_parts = 0.0
    do ii=1,8
      call intersect(polys8(ii), makeParabola(normal, kappa0, shift))
      tmp = cmpMoments(polys8(ii))
      moments01_parts = moments01_parts + tmp
    enddo
    @assertEqual(moments01_para, moments01_parts, TOLERANCE)

    ! A special case which fails
    x0 =        [7.8125000000000000D-003,   0.0000000000000000D0]
    pos(:, 1) = [0.0000000000000000D0     ,  -7.8125000000000000D-003] - x0
    pos(:, 2) = [0.0000000000000000D0     ,   7.8125000000000000D-003] - x0
    pos(:, 3) = [3.4458603408377459D-003,   6.7317744943550615D-003] - x0
    pos(:, 4) = [3.1726489965236038D-003,  -7.8125000000000017D-003] - x0
    ! pos5(:, 5) = [0.0000000000000000     ,  -7.8125000000000000E-003]

    normal =    [-0.99897516533599229D0   ,   4.5261672990808480D-002]
    shift = 7.6984592557472181D-003
    kappa0 = 13.746906323304344D0

    ! Approximate with 1E5 points
    moments01_exact = -[4.623807682389947D-05,  0.810186449104417D-07,  -0.200835995785912D-07]
    moments01_exact(2:3) = moments01_exact(2:3) - moments01_exact(1) * x0


    call init(poly, pos)
    call intersect(poly, makeParabola(normal, kappa0, shift))
    moments01_para = cmpMoments(poly)

    @assertEqual(moments01_para, moments01_exact, TOLERANCE)

  end subroutine


  @Test
  subroutine test_symmetricDifference
    use m_reconstruction_util
    use m_r2d_parabolic

    implicit none

    real*8, parameter       :: APPROX_TOLERANCE = 5D-5 ! This is related to R2D_MAX_VERTS being relatively small
    real*8                  :: radius, x(2), dx(2), normal(2), kappa0, sd, pi, angle, shift
    real*8                  :: mom_gas(3), mom_liq(3), mom01(3), tmp
    integer, parameter      :: NR_STEPS = 100
    integer                 :: sdx
    type(r2d_poly_f)        :: poly

    ! Results from MATLAB (very accurate)
    real*8, parameter       :: sd_MATLAB(NR_STEPS) = [&   
#include "intersection_sd.dat"
    &]

    pi = 4 * datan(1.0D0)

    radius = 0.5D0
    x = 0.5D0
    dx = 1.D0
    normal = [1.0D0, 0.D0]
    shift = -dot_product(abs(normal), dx) / 2
    kappa0 = 0.D0

    ! Analytical:
    sd = cmpSymmDiff(x, dx, makeParabola(normal, kappa0, shift), levelset)
    @assertEqual(pi / 16, sd, APPROX_TOLERANCE)

    ! Computed in MATLAB:
    do sdx=1,NR_STEPS
      angle = (sdx - 1.0D0) * 2 * pi / (NR_STEPS - 1.0D0)
      shift = -0.25D0 + (sdx - 1.0D0) * 0.5D0 / (NR_STEPS - 1.0D0)
      kappa0 = -0.5D0 + (sdx - 1.0D0) / (NR_STEPS - 1.0D0)
      normal = [dcos(angle), dsin(angle)] ! Outward pointing normal

      radius = 0.5D0 + (sdx - 1.0D0) * (dsqrt(2.D0) - 0.5D0) / (NR_STEPS - 1.0D0)

      call polyApprox(poly, x, dx, levelset, GAS_PHASE)
      mom_gas = cmpMoments(poly)
      call polyApprox(poly, x, dx, levelset, LIQUID_PHASE)
      mom_liq = cmpMoments(poly)

      sd = cmpSymmDiff(x, dx, makeParabola(normal, kappa0, shift), levelset)

      if (radius <= 1.) then
        @assertEqual(pi * radius**2 / 4, mom_liq(1), APPROX_TOLERANCE)
      elseif (sdx == NR_STEPS) then
        @assertEqual(1.0, mom_liq(1), APPROX_TOLERANCE)

        mom01 = cmpMoments(dx, makeParabola(-normal, kappa0, shift))
        @assertEqual(1.0 - mom01(1), sd, APPROX_TOLERANCE)
      endif

      @assertEqual(product(dx), mom_gas(1) + mom_liq(1), TOLERANCE)

      @assertEqual(sd_MATLAB(sdx), sd, APPROX_TOLERANCE)
    enddo


  contains
    real*8 function levelset(x_in) result(f)
      implicit none

      real*8, intent(in)      :: x_in(2)

      f = norm2(x_in) - radius
    end
  end

  @Test 
  subroutine test_cmpMoments()
    use m_r2d_parabolic

    implicit none

    real*8                :: angle, normal(2), shift, max_shift_plane, dx(2), pi
    real*8                :: refMoments(3), r2dMoments(3)
    integer               :: adx, sdx
    type(r2d_poly_f)      :: poly

    integer, parameter    :: NR_ANGLE = 30, NR_SHIFT = 30

    pi = 4 * datan(1.0D0)

    dx = [0.123D0, pi/10]

    do adx=1,NR_ANGLE
    do sdx=1,NR_SHIFT
      angle = 2 * pi * (adx - 1.D0) / NR_ANGLE
      normal = [dcos(angle), dsin(angle)]
      
      max_shift_plane = dot_product(abs(normal), dx) / 2
      shift = max_shift_plane * (-1.D0 + 2 * sdx / (NR_SHIFT + 1.D0))

      call makeBox_bounds(poly, [-dx/2, dx/2])
      call intersect(poly, makePlane(normal, shift))
      r2dMoments = cmpMoments(poly)

      refMoments = cmpMoments([0.D0, 0.D0], dx, levelSet, verts_per_segment=2)

      @assertEqual(r2dMoments, refMoments, TOLERANCE)
      @assertLessThanOrEqual(abs(refMoments(2:3)/refMoments(1)), dx/2)

    enddo
    enddo
  contains
    ! The liquid part coincides with levelSet(x) < 0 (normal points into gas)
    real*8 function levelSet(x) result(ans)
      implicit none

      real*8, intent(in)  :: x(2)

      ans = dot_product(x, normal) - shift

    end function
  end subroutine

  @Test 
  subroutine test_cmpMoments_levelSet()
    use m_r2d_parabolic

    implicit none

    integer, parameter    :: NR_REFINE = 15
    real*8                :: pi, refMoments(3), errors(NR_REFINE), order
    integer               :: nr_verts, rdx

    real*8, parameter     :: RADIUS = 0.5

    pi = 4 * datan(1.0D0)

    do rdx=1,NR_REFINE
      nr_verts = 2**rdx
      refMoments = cmpMoments([0.5D0, 0.5D0], [1.D0, 1.D0], levelSet, verts_per_segment=nr_verts)
      errors(rdx) = refMoments(1) - pi*RADIUS**2/4
      if (rdx > 1) then
        order = -log(errors(rdx) / errors(1)) / ((rdx-1)*log(2.0D0))
        @assertGreaterThanOrEqual(order, 1.7D0)
      endif
    enddo

  contains
    ! The liquid part coincides with levelSet(x) < 0 (normal points into gas)
    real*8 function levelSet(x) result(ans)
      implicit none

      real*8, intent(in)  :: x(2)

      ans = norm2(x) - RADIUS

    end function
  end subroutine

  @Test
  subroutine test_cmpInterfaceMoments()
    use m_r2d
    use m_reconstruction_util

    implicit none
    
    integer, parameter      :: NR_ANGLE = 50, NR_SHIFT = 50
    real*8                  :: dx(2), normal(2), moments(3), moments_r2d(3)
    real*8                  :: angle, shift, lengthScale, pi, cellVol, edge(2, 2)
    integer                 :: adx, sdx
    type(r2d_poly_f)        :: poly

    pi = 4 * datan(1.0d0)
    dx = [0.1D0, 0.15D0]
    cellVol = product(dx)

    do adx = 1, NR_ANGLE
    do sdx = 1, NR_SHIFT
      angle = 2 * pi * (adx - 1.D0) / (NR_ANGLE - 1.D0)
      normal = [dcos(angle), dsin(angle)]
      lengthScale = dot_product(dx, abs(normal))

      shift = lengthScale * sdx / (NR_SHIFT + 1) - lengthScale/2

      call makeBox_bounds(poly, [-dx/2, dx/2])
      call intersect(poly, makePlane(normal, shift))

      edge = get_edge(poly, normal)
      moments_r2d(1) = norm2(edge(:,2) - edge(:,1))
      moments_r2d(2:3) = (edge(:,2) + edge(:,1)) * moments_r2d(1) / 2
      
      moments = cmpInterfaceMoments(normal, dx, shift)

      @assertEqual(moments_r2d, moments, TOLERANCE * sqrt(cellVol))
    enddo
    enddo
  end subroutine

  @Test
  subroutine test_cmpmoments_time()
    use m_reconstruction_util
    use m_r2d_parabolic

    implicit none

    ! Local variables
    integer, parameter      :: NR_REPETITIONS = 10000
    type(r2d_poly_f)        :: poly
    real*8                  :: dx(2), angle, normal(2), shift, kappa0, moments01(3)
    real*8                  :: tmp, time_intersect_plane, time_intersect_r2d_plane, time_intersect_parabola
    integer                 :: rep


    dx = [0.123D0, 0.3141592D0]
    angle = 0.4321D0
    normal = [dcos(angle), dsin(angle)]
    shift = 0.0123D0
    kappa0 = -0.05D0

    ! Test the time needed to intersect and compute the resulting 
    ! intersection moments (zeroth and first)

    call cpu_time(tmp)
    do rep=1,NR_REPETITIONS
      moments01 = cmpMoments(normal, dx, shift)
    enddo
    call cpu_time(time_intersect_plane)
    time_intersect_plane = time_intersect_plane - tmp

    call cpu_time(tmp)
    do rep=1,NR_REPETITIONS
      call makeBox_bounds(poly, [-dx/2, dx/2])
      moments01 = cmpMoments_(poly, makePlane(normal, shift))
    enddo
    call cpu_time(time_intersect_r2d_plane)
    time_intersect_r2d_plane = time_intersect_r2d_plane - tmp

    call cpu_time(tmp)
    do rep=1,NR_REPETITIONS
      moments01 = cmpMoments(dx, makeParabola(normal, kappa0, shift))
    enddo
    call cpu_time(time_intersect_parabola)

    time_intersect_parabola = time_intersect_parabola - tmp

    print*, 'INTERSECTION TIMING:'
    print*, '... PLANE USING UTIL    = ', time_intersect_plane / NR_REPETITIONS
    print*, '... PLANE USING R2D     = ', time_intersect_r2d_plane / NR_REPETITIONS
    print*, '... PARABOLA USING UTIL = ', time_intersect_parabola / NR_REPETITIONS

  end subroutine

  @Test
  subroutine test_new_cmpmoments_time()
    use m_polygon

    implicit none

    ! Local variables
    integer, parameter      :: NR_REPETITIONS = 10000
    type(tPolygon)          :: poly
    type(tParabola)         :: plane
    real*8                  :: dx(2), angle, mom(3)
    real*8                  :: tmp, time_intersect_polygon
    integer                 :: rep


    dx = [0.123D0, 0.3141592D0]
    angle = 0.4321D0
    
    plane%normal = [dcos(angle), dsin(angle)]
    plane%shift = 0.0123D0
    plane%kappa0 = -0.05D0

    call cpu_time(tmp)
    do rep=1,NR_REPETITIONS
      call makeBox(poly, dx)
      call intersect(poly, plane)
      mom = cmpMoments(poly)
    enddo
    call cpu_time(time_intersect_polygon)
    
    time_intersect_polygon = time_intersect_polygon - tmp


    print*, 'INTERSECTION TIMING:'
    print*, '... PARABOLA USING POLYGON = ', time_intersect_polygon / NR_REPETITIONS

  end subroutine
end module